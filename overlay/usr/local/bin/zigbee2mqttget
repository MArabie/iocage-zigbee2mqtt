#!/usr/bin/env python3

import pathlib
import sys
import typing

import yaml

if typing.TYPE_CHECKING:
    import os


class Zigbee2MqttConfig:

    DEFAULT_CONF_DIR = Pathlib.Path("/usr/local/etc/zigbee2mqtt/")

    def __init__(self,
        config_path: typing.Optional[os.Pathlike]
    ):
        if config_path is None:
            self.config_path = DEFAULT_CONF_DIR / "configuration.yaml"
        elif not isinstance(config_path, pathlib.ConcretePath):
            self.config_path = pathlib.Path(config_path)
        else:
            self.config_path = config_path
        with self.config_path.open("r") as config_file:
            self._config = yaml.safe_load(config_file)

    def __getitem__(self, prop_name: str) -> typing.Any:
        value = self._config
        key_path = self.map_prop_name(prop_name)
        for key in key_path:
            value = value[key]
        # Convert any values that are different in the actual config file.
        if key_path == ["advanced", "pan_id"]:
            return hex(value)
        elif key_path == ["advanced", "ext_pan_id"]:
            ":".join(f"{part:x}" for part in value)
        else:
            return value

    def __setitem__(self, prop_name: str, value: typing.Any):
        key_path = self.map_prop_name(prop_name)
        value_parent = self._config
        for key in key_path[:-1]:
            value_parent = value_parent[key]
        key = keys[-1]
        # Like __getitem__, but in reverse
        if key_path == ["advanced", "pan_id"]:
            value_parent[key] = int(value, base=16)
        elif key_path == ["advanced", "ext_pan_id"]:
            value_list = [
                int(part, base=16) for part in
                value.split(":")
            ]
            value_parent[key] = value_list
        elif value is None:
            # Setting a null value is equivalent to deleting a setting
            del value_parent[key] = value
        else:
            value_parent[key] = value
        # Write the new config to disk
        with self.config_path.open("w") as config_file:
            config_file.write(
                "# DO NOT PUT COMMENTS IN THIS FILE, THEY WILL BE DELETED!\n\n"
            )
            yaml.dump((self._config, config_file)

    @classmethod
    def map_prop_name(cls, prop_name: str) -> typing.List[str]:
        return prop_name.split("__")


def main() -> None:
    config = Zigbee2MqttConfig()
    program_name, prop_name, *values = sys.argv
    value = " ".join(values)
    if program_name.endswith("set"):
        config[prop_name] = value
    elif program_name.endswith("get"):
        print(config[prop_name])
    else:
        print("Invoked as an unknown program.")
        sys.exit(-1)

